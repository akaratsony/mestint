
    
class Problem:
    def __init__(self, initial, goal=None):
        self.initial = initial
        self.goal = goal

    def actions(self, state):
        raise NotImplementedError

    def result(self, state, action):
        raise NotImplementedError

    def goal_test(self, state):
        if isinstance(self.goal, list):
            for s in self.goal:
                if s==state:
                    return True

            return False
        else:
            return state == self.goal
        
    def path_cost(self, c, state1, action, state2):
        return c + 1


class Node:
    def __init__(self, state, parent=None, action=None, path_cost=0):
        self.state = state
        self.parent = parent
        self.action = action
        self.path_cost = path_cost
        self.depth = 0
        if parent:
            self.depth = parent.depth + 1

    def child_node(self, problem, action):
        next_state = problem.result(self.state, action)
        next_node = Node(state = next_state, 
                         parent = self, 
                         action = action, 
                         path_cost = problem.path_cost(self.path_cost, self.state, action, next_state))
        return next_node

    def expand(self, problem):
        return [self.child_node(problem, action) for action in problem.actions(self.state)]

    def solution(self):
        return [node.action for node in self.path()[1:]]

    def path(self):
        node, path_back = self, []
        while node:
            path_back.append(node)
            node = node.parent
        return list(reversed(path_back))

    
class FarmProblem(Problem):
    def __init__(self):
        super().__init__((0,0,0,0),[(1,1,1,1)])
    def actions(self, state):
        #a1 farmer,a2 kecske,a3farkas,a4kaposzta
     farmer,kecske,farkas,kaposzta = state
     acts = []
     if state[farmer]==0:
            acts.append('farmer')
     if farmer==kecske:
            acts.append('farmer_kecske')
     if farmer==farkas:
            acts.append('farmer_farkas')
     if farmer==kaposzta:
            acts.append('farmer_kaposzta')
     return acts

    def goal_test(self,state):
        if state[0] == 1 and state[1] ==1 and state[2] ==1 and state[3] ==1:
            return True
        return False
    def result(self,state,action):
        farmer,kecske,farkas,kaposzta = state
        new_state = list(state)
        if action =="famer":
            new_state[0] =int(not state[0])
        if action =="farmer_kecske":
            new_state[0] = int(not state[0])
            new_state[1] = int(not state[1])
        if action =="farmer_farkas":
            new_state[0] = int(not state[0])
            new_state[2] = int(not state[2])
        if action =="farmer_kaposzta":
            new_state[0] = int(not state[0])
            new_state[3] = int(not state[3])
        return tuple(new_state)

if __name__ == '__main__':
    f = FarmProblem()
    print(f.initial, f.goal)
    print(f.goal_test(f.initial))
    print(f.actions(f.initial))
    print(f.result(f.initial,"farmer_kecske"))

