from problem import *
from collections import namedtuple

Operator=namedtuple("Operator", ["i", "j"])


class Hanoi(Problem):
    def __init__(self, n):
        self.size = n
        super().__init__(initial = '1' * self.size,
                         goal=['3' * self.size])

    def actions(self, state):
        acts = []
        smallest_disk_tower_1 = state.find('1') + 1
        smallest_disk_tower_2 = state.find('2') + 1
        smallest_disk_tower_3 = state.find('3') + 1

        if smallest_disk_tower_1 == 0:
            smallest_disk_tower_1 = float('inf')
        if smallest_disk_tower_2 == 0:
            smallest_disk_tower_2 = float('inf')
        if smallest_disk_tower_3 == 0:
            smallest_disk_tower_3 = float('inf')

        # if smallest_disk_tower_1 < smallest_disk_tower_2:
        #     acts.append(Operator(1,2))
        # if smallest_disk_tower_1 < smallest_disk_tower_3:
        #     acts.append(Operator(1,3))
        # if smallest_disk_tower_2 < smallest_disk_tower_1:
        #     acts.append(Operator(2,1))
        # if smallest_disk_tower_2 < smallest_disk_tower_3:
        #     acts.append(Operator(2,3))
        # if smallest_disk_tower_3 < smallest_disk_tower_1:
        #     acts.append(Operator(3,1))
        # if smallest_disk_tower_3 < smallest_disk_tower_2:
        #     acts.append(Operator(3,2))

        smallest_disks = [smallest_disk_tower_1, smallest_disk_tower_2, smallest_disk_tower_3]
        for i in range(3):
            for j in range(3):
                if smallest_disks[i] < smallest_disks[j] and i != j:
                    acts.append(Operator(i + 1, j + 1))

        return acts


    def result(self, state, action):
        i, j = action
        disk = state.find(str(i))
        return state[:disk] + str(j) + state[disk + 1:]


if __name__ == '__main__':
    h = Hanoi(3)
    print(h.initial, h.goal)
    print(h.actions(h.initial))
    print(h.result(h.initial, Operator(1,2)))
