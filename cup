from problem import Problem

class Cup3(Problem):

    def __init__(self):
        # self.initial = (5, 0, 0)
        # self.goal = [(4, 1, 0), (4, 0, 1)]
        self.capacities = [5,3,2]
        super().__init__(initial=(5, 0, 0), goal=[(4, 1, 0), (4, 0, 1)])

    def actions(self, state):
        acts = []
        # s1, s2, s3 = state #(5,0,0) => s1 = 5, s2 = 0, s3 = 0
        # if s1 > 0 and s2 < 3:
        #     acts.append('o_1_2')
        # if s1 > 0 and s3 < 2:
        #     acts.append('o_1_3')
        # if s2 > 0 and s1 < 5:
        #     acts.append('o_2_1')
        # if s2 > 0 and s3 < 2:
        #     acts.append('o_2_3')
        # if s3 > 0 and s1 < 5:
        #     acts.append('o_3_1')
        # if s3 > 0 and s2 < 3:
        #     acts.append('o_3_2')
        capacities = [5,3,2]
        for i in range(3):
            for j in range(3):
                if i != j:
                    if state[i] > 0 and state[j] < capacities[j]:
                        acts.append(f'o_{i + 1}_{j + 1}')
        return acts

    def result(self, state, action):
        a1, a2, a3 = state
        action_data = action.split('_')
        # _, i, j = action_data
        i, j = int(action_data[1]), int(action_data[2])
        # if i == 1 and j == 2:
        #     m = min(a1, 3 - a2)
        #     return (a1 - m, a2 + m, a3)
        # if i == 1 and j == 3:
        #     m = min(a1, 2 - a3)
        #     return (a1 - m, a2, a3 + m)
        # if i == 2 and j == 1:
        #     m = min(a2, 5 - a1)
        #     return (a1 + m, a2 - m, a3)
        # if i == 2 and j == 3:
        #     m = min(a2, 2 - a3)
        #     return (a1, a2 - m, a3 + m)
        # if i == 3 and j == 1:
        #     m = min(a3, 5 - a1)
        #     return (a1 + m, a2, a3 - m)
        # if i == 3 and j == 2:
        #     m = min(a3, 3 - a2)
        #     return (a1, a2 + m, a3 - m)
        m = min(state[i - 1], self.capacities[j - 1] - state[j - 1])
        new_state = list(state)
        new_state[i - 1] -= m
        new_state[j - 1] += m
        return tuple(new_state)

    def value(self, state):
        """we have no good heuristics"""
        return 0


if __name__ == '__main__':
    c = Cup3()
    print(c.initial, c.goal)
    print(c.actions(c.initial))
    print(c.result(c.initial, 'o_1_2'))

